"use strict";$(document).ready(function(){$("#menu").mmenu({classes:"mm-slide",offCanvas:{position:"right"},footer:{add:!0,title:"Copyrights 2015 Medical Guide. all rights reserved."},header:{title:"Medical Guide",add:!0,update:!0}})}),$(window).scroll(function(){1<$(this).scrollTop()?$("header").addClass("sticky"):$("header").removeClass("sticky")}),$(window).scroll(function(){1<$(this).scrollTop()?$(".header2").addClass("sticky"):$(".header2").removeClass("sticky")}),$(function(){var o=$(window);o.on("mousewheel DOMMouseScroll",function(e){e.preventDefault();var t=e.originalEvent.wheelDelta/125||-e.originalEvent.detail/3,n=o.scrollTop()-parseInt(355*t);TweenMax.to(o,.6,{scrollTo:{y:n,autoKill:!0},ease:Power1.easeOut,autoKill:!0,overwrite:5})})}),$(function(){var e=function(e,t){this.el=e||{},this.multiple=t||!1,this.el.find(".link").on("click",{el:this.el,multiple:this.multiple},this.dropdown)};e.prototype.dropdown=function(e){var t=e.data.el,n=$(this),o=n.prev();o.slideToggle(),n.parent().toggleClass("open"),e.data.multiple||t.find(".submenu").not(o).slideUp().parent().removeClass("open")};new e($("#accordion2"),!1)}),(Accordion=function(e,t){this.el=e||{},this.multiple=t||!1,this.el.find(".link").on("click",{el:this.el,multiple:this.multiple},this.dropdown)}).prototype.dropdown=function(e){var t=e.data.el,n=$(this),o=n.next();o.slideToggle(),n.parent().toggleClass("open"),e.data.multiple||t.find(".bgcolor-3").not(o).slideUp().parent().removeClass("open")};var accordion=new Accordion($("#accordion"),!1);function onInputFocus(e){classie.add(e.target.parentNode,"input--filled")}function onInputBlur(e){""===e.target.value.trim()&&classie.remove(e.target.parentNode,"input--filled")}$(function(){var e=function(e,t){this.el=e||{},this.multiple=t||!1,this.el.find(".link").on("click",{el:this.el,multiple:this.multiple},this.dropdown)};e.prototype.dropdown=function(e){var t=e.data.el,n=$(this),o=n.next();o.slideToggle(),n.parent().toggleClass("open"),e.data.multiple||(t.find(".submenu-active").not(o).slideUp().parent().removeClass("open"),t.find(".submenu").not(o).slideUp().parent().removeClass("open"))};new e($("#why-choose"),!1)}),[].slice.call(document.querySelectorAll("input.input__field")).forEach(function(e){e.addEventListener("focus",onInputFocus),e.addEventListener("blur",onInputBlur)}),$("#datepicker").datepicker({inline:!0}),[].slice.call(document.querySelectorAll("textarea.input__field")).forEach(function(e){""!==e.value.trim()&&classie.add(e.parentNode,"input--filled"),e.addEventListener("focus",onInputFocus),e.addEventListener("blur",onInputBlur)}),$("#datepicker").datepicker({inline:!0});var tabbedNav=$("#tabbed-nav").zozoTabs({orientation:"horizontal",theme:"silver",position:"top-left",size:"medium",animation:{duration:600,easing:"easeOutQuint",effects:"fade"},defaultTab:"tab1"});$("#config input.effects").change(function(){var e=$("input[type=radio]:checked").attr("id");tabbedNav.data("zozoTabs").setOptions({animation:{effects:e}})}),$("#owl-demo").owlCarousel({items:3,lazyLoad:!0,navigation:!0}),$("#owl-demo4").owlCarousel({items:3,lazyLoad:!0,navigation:!0}),$("#owl-demo2").owlCarousel({autoPlay:111110,stopOnHover:!0,paginationSpeed:1e3,goToFirstSpeed:2e3,singleItem:!0,autoHeight:!0}),$("#team-detail").owlCarousel({navigation:!0,slideSpeed:300,paginationSpeed:400,singleItem:!0}),$("#services-slide").owlCarousel({navigation:!0,slideSpeed:300,paginationSpeed:400,singleItem:!0}),$("#blog-slide").owlCarousel({navigation:!0,slideSpeed:300,paginationSpeed:400,singleItem:!0}),jQuery(document).ready(function(t){var e=t(".cd-top");t(window).scroll(function(){300<t(this).scrollTop()?e.addClass("cd-is-visible"):e.removeClass("cd-is-visible cd-fade-out"),1200<t(this).scrollTop()&&e.addClass("cd-fade-out")}),e.on("click",function(e){e.preventDefault(),t("body,html").animate({scrollTop:0},1400)})}),(Accordion=function(e,t){this.el=e||{},this.multiple=t||!1,this.el.find(".link").on("click",{el:this.el,multiple:this.multiple},this.dropdown)}).prototype.dropdown=function(e){var t=e.data.el,n=$(this),o=n.next();o.slideToggle(),n.parent().toggleClass("open"),e.data.multiple||t.find(".submenu").not(o).slideUp().parent().removeClass("open")};var Accordion;accordion=new Accordion($("#procedures-links"),!1);(Accordion=function(e,t){this.el=e||{},this.multiple=t||!1,this.el.find(".link").on("click",{el:this.el,multiple:this.multiple},this.dropdown)}).prototype.dropdown=function(e){var t=e.data.el,n=$(this),o=n.next();o.slideToggle(),n.parent().toggleClass("open"),e.data.multiple||t.find(".submenu").not(o).slideUp().parent().removeClass("open")};accordion=new Accordion($("#procedures-faq"),!1);function checkcontact(e){return!!/^([a-zA-Z0-9_.-])+@([a-zA-Z0-9_.-])+\.([a-zA-Z])+([a-zA-Z])+/.test(e)}function validateAppointment(){var e="",t=document.getElementById("input-29"),n=document.getElementById("input-30"),o=document.getElementById("datepicker");if(""==t.value?e+="Please provide your name.":""==n.value?e+="Please provide an email address.":0==checkcontact(n.value)?e+="Please provide a valid email address.":""==o.value&&(e+="Please select an appointment date."),e)return document.getElementById("error").style.display="block",document.getElementById("error").innerHTML=e,!1;$.ajax({type:"POST",url:"process.php",data:$("#appointment_form").serialize(),success:function(e){"success"==e?(document.getElementById("error").style.display="none",document.getElementById("input-29").value="",document.getElementById("input-30").value="",document.getElementById("datepicker").value="",document.getElementById("input-31").value="",document.getElementById("textarea").value="",$("#appointment_form").hide(),document.getElementById("success").style.display="block",document.getElementById("success").innerHTML="Thank You! We'll contact you shortly."):(document.getElementById("error").style.display="block",document.getElementById("error").innerHTML="Oops! Something went wrong while prceeding.")}})}function validateSubscription(){var t=document.getElementById("subscribe_name"),n=document.getElementById("subscribe_email");return""==t.value?!(t.className="input error"):""==n.value?!(n.className="input error"):0==checkcontact(n.value)?!(n.className="input error"):void $.ajax({type:"POST",url:"process.php",data:$("#subscribe_form").serialize(),success:function(e){"success"==e?(t.className="input",t.value="",n.className="input",n.value="",$("#subscribe_form").hide(),document.getElementById("subscribe_success").style.display="block",document.getElementById("subscribe_success").innerHTML="Thank You! We'll contact you shortly."):(document.getElementById("subscribe_error").style.display="block",document.getElementById("subscribe_error").innerHTML="Oops! Something went wrong while prceeding.")}})}function removeChecks(){var e=document.getElementById("subscribe_name"),t=document.getElementById("subscribe_email");""!=e.value&&(e.className="input"),""!=t.value&&1==checkcontact(t.value)&&(t.className="input")}function validateContact(){var e="",t=document.getElementById("contact_name"),n=document.getElementById("contact_email"),o=document.getElementById("contact_subject");if(""==t.value?e+="Please provide your name.":""==n.value?e+="Please provide an email address.":0==checkcontact(n.value)?e+="Please provide a valid email address.":""==o.value&&(e+="Please provide a subject."),e)return document.getElementById("error").style.display="block",document.getElementById("error").innerHTML=e,!1;$.ajax({type:"POST",url:"process.php",data:$("#contact_form").serialize(),success:function(e){"success"==e?(document.getElementById("error").style.display="none",document.getElementById("contact_name").value="",document.getElementById("contact_email").value="",document.getElementById("contact_subject").value="",document.getElementById("message").value="",$("#contact_form").hide(),document.getElementById("success").style.display="block",document.getElementById("success").innerHTML="Thank You! We'll contact you shortly."):(document.getElementById("error").style.display="block",document.getElementById("error").innerHTML="Oops! Something went wrong while prceeding.")}})}jQuery(window).load(function(){jQuery("#status").fadeOut(),jQuery("#preloader").delay(350).fadeOut("slow"),jQuery("body").delay(350).css({overflow:"visible"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
